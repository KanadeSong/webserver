package com.seater.smartmining.dao;

import com.seater.smartmining.entity.ProjectCarWorkInfo;
import com.seater.smartmining.enums.PricingTypeEnums;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;

public interface ProjectCarWorkInfoDaoI {
    ProjectCarWorkInfo get(Long id) throws IOException;
    ProjectCarWorkInfo save(ProjectCarWorkInfo log) throws IOException;
    void delete(Long id);
    void delete(List<Long> ids);
    Page< ProjectCarWorkInfo> query();
    Page<ProjectCarWorkInfo> query(Specification<ProjectCarWorkInfo> spec);
    Page<ProjectCarWorkInfo> query(Pageable pageable);
    Page<ProjectCarWorkInfo> query(Specification<ProjectCarWorkInfo> spec, Pageable pageable);
    List<ProjectCarWorkInfo> getAll();
    ProjectCarWorkInfo getByProjectIdAndCarIdAndTimeCheck(Long projectId, Long carId, Date timeChaeck);
    ProjectCarWorkInfo getByProjectIdAndDiggingMachineIdAndTimeCheck(Long projectId, Long diggingMachineId, Date timeCheck);
    ProjectCarWorkInfo getByProjectIdAndCarIdAndTimeLoad(Long projectId, Long carId, Date timeLoad);
    ProjectCarWorkInfo getByProjectIdAndCarIdAndTimeDischarge(Long projectId, Long carId, Date timeDischarge);
    List<Map> getDistanceListByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getCountListByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getCarGrandTotalListByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getDiggingDayCountListByProjectIdAndTime(Long projectId, Date startTime, Date endTime, Integer pricingType);
    List<Map> getDiggingDayCountListByProjectIdAndTimeGroupByShift(Long projectId, Date startTime, Date endTime);
    List<Map> getDiggingDayCountListByProjectIdAndTimeAndMachineId(Long projectId, Date startTime, Date endTime, Long machineId);
    List<Map> getMaterialDetailByProjectIdAndMachineIdAndTime(Long projectId, Long machineId, Date startTime, Date endTime);
    List<Map> getMaterialDetailByProjectIdAndMachineIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getProjectCarWorkInfoByCreateDate(Date reportDate);
    List<Map> getSettlementDetailByProjectIdAndTimeAndCarId(Long projectId, Date startTime, Date endTime, Long carId);
    List<Map> getCubicDetailByProjectIdAndDiggingMachineIdAndTime(Long projectId, Long machineId, List<String> dateList, Integer pricingType);
    List<Map> getElseTotalByProjectIdAndDiggingMachineIdAndTime(Long projectId, Long machineId, List<String> dateList, Integer pricingType);
    List<Map> getDetailTotalByProjectIdAndMachineIdAndTime(Long projectId, Long machineId, Date startTime, Date endTime, Integer pricingType);
    List<Map> getByCubicDetailOrderByProjectIdAndCarIdAndTime(Long projectId, Long carId, Date startTime, Date endTime);
    List<Map> getMachineIdByProjectIdAndPageAndTime(Long projectId, Integer current, Integer pageSize, Date time);
    List<Map> getAllSettlementByProjectIdAndCarIdAndTime(Long projectId, Long carId, Date startTime, Date endTime);
    List<Map> getCarsCountByProjectIdAndCarIdAndTime(Long projectId, Long carId, Date beginDate, Date endDate);
    List<Map> getSumCubicByTime(Long projectId, Long machineId, Date date);
    List<Map> getDateIdentificationByMachineId(Long projectId, Long machineId, Date startTime, Date endTime);
    List<Map> getMachineIdListByDate(Long projectId, Date time);
    List<Map> getAppDiggingInfoByProjectIdAndDate(Long projectId, Date date);
    Map getCarsCountByProjectIdAndDateIdentificationAndPass(Long projectId, Date date, Integer pass, Integer shift);
    List<Map> getCarsCountByProjectIdAndDateIdentification(Long projectId, Date date, Integer shift);
    Map getHistoryInfoByTime(Long projectId, Date startTime);
    List<Map> getUnpassInfoByProjectIdAndDate(Long projectId, Date date);
    List<ProjectCarWorkInfo> getCarsCountUnPassByProjectIdAndDate(Long projectId, Date date, Integer pass, Integer shift);
    List<Map> countByProjectIdAndDateIdentification(Long projectId, Date date);
    Integer countByProjectIdAndDateIdentificationAndMaterialId(Long projectId, Date date, Long materialId);
    List<Map> getTotalCubicAndCountByProjectIdAndDateIdentification(Long projectId, Date date);
    void savAll(List<ProjectCarWorkInfo> projectCarWorkInfos);
    List<ProjectCarWorkInfo> queryAllByParams(Specification<ProjectCarWorkInfo> specification);
    List<Map> getCountByProjectIdAndShiftAndDate(Long projectId, Integer shift, Date date);
    List<Map> getByProjectId(Long projectId);
    List<Map> getDiggingWorkReport(Long projectId, Date startTime, Date endTime);
    List<Map> getDiggingWorkReportMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getDiggingWorkReportHistory(Long projectId, Date endTime);
    List<Map> getQualificationReport(Long projectId, Date startTime, Date endTime);
    List<Map> getQualificationReportMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getQualificationReportHistory(Long projectId, Date endTime);

    List<Map> findByProjectIdAndStatus(Long projectId, Date startDate, Date endDate, Integer status);
    List<Map> getCarAttendanceReport(Long projectId, Date date);
    List<Map> getCarAttendanceReportMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getCarAttendanceDateReport(Long projectId, Date startTime, Date endTime);
    List<Map> getCarAttendanceDateReportMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getQualificationCarReport(Long projectId, Date startTime, Date endTime);
    List<Map> getQualificationCarReportMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getCarCubicInfo(Long projectId, Date startTime, Date endTime);
    List<Map> getCarCubicInfoMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getFinishCarCountByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<ProjectCarWorkInfo> getAllByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getReportInfoGroupBySlagSite(Long projectId, Date startTime, Date endTime);
    List<Map> getCarsCountByDate(Long projectId, Date startTime, Date endTime);
    List<Map> getCarsCountByDateMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getCarsCountByDateHistory(Long projectId, Date endTime);
    List<Map> getTotalCountByTimer(Long projectId, Date startTime, Date endTime, Integer pricingType);
    List<Map> getTotalCountByTimerMonth(Long projectId, Date startTime, Date endTime, Integer pricingType);
    List<Map> getTotalCountByTimerHistory(Long projectId, Date endTime, Integer pricingType);
    List<Map> getTotalCount(Long projectId, Date startTime, Date endTime);
    List<Map> getTotalCountMonth(Long projectId, Date startTime, Date endTime);
    List<Map> getTotalCountHistory(Long projectId, Date startTime, Date endTime);
    List<ProjectCarWorkInfo> getAllByProjectIdAndCarCodeAndDateIdentification(Long projectId, String carCode, Date date);
    List<Map> getByProjectIdAndBetweenTime(Long projectId, Date startTime, Date endTime);
    List<Map> getByProjectIdAndBetweenTimeHistory(Long projectId, Date endTime);
    Long getCarsCountByProjectIdAndDateIdentificationAndCarCode(Long projectId, String carCode, Date date, Integer shift);
    List<Map> getByProjectIdAndTime(Long projectId, Date date);
    List<ProjectCarWorkInfo> getAllByProjectIdAndDateTime(Long projectId, Date startTime, Date endTime);
    List<ProjectCarWorkInfo> getAllByProjectIdAndDateIdentificationAndShift(Long projectId, Date date, Integer shift);
    List<Map> getWorkInfoListByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    List<Map> getDistinctByProjectIdAndTime(Long projectId, Date startTime, Date endTime);
    Integer getCoalCountByTime(Long projectId, Date startTime, Date endTime);
    List<Map> getOnDutyCountByProjectIdAndTime(Long projectId, Date startTime, Date endTime, Integer shift);
    List<Map> getAllByProjectIdAndDateIdentificationAndShiftAndStatus(Long projectId, Date date, Integer shift, Integer status);
    List<Map> getAllByProjectIdAndDateIdentificationAndShiftAndStatusGroupByErrorCode(Long projectId, Date date, Integer shift, Integer status);
    List<Map> getMergeCodeByProjectIdAndDateIdentificationAndShift(Long projectId, Date date, Integer shift, Integer status);
    void deleteAllByProjectIdAndTimeDischarge(Long projectId, Date startTime, Date endTime);
    List<ProjectCarWorkInfo> getAllByProjectIdAndTimeLoadHalf(Long projectId, Date startTime, Date endTime, Integer status, String carCode);
    List<ProjectCarWorkInfo> getAllByProjectIdAndDateIdentificationAndShiftAndStatusByError(Long projectId, Date date, Integer shift, Integer status);
    List<ProjectCarWorkInfo> getAllByProjectIdAndTimeDischargeAndStatus(Long projectId, Date startTime, Date endTime);
    ProjectCarWorkInfo getAllByProjectIdAndCarCodeAndMaxTimeDischarge(Long projectId, String carCode);
    ProjectCarWorkInfo getAllByProjectIdAndCarCodeAndMaxTimeDischarge(Long projectId, String carCode, Date timeDischarge);
    List<Map> getTotalCountByProjectIdAndDateIdentificationAndShiftAndStatusAndCarCode(Long projectId, Date date, Integer shift, Integer status, String carCode);
    List<ProjectCarWorkInfo> getAllByProjectIdAndDateIdentificationAndShiftAndRemark();
}
